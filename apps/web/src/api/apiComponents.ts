/**
 * Generated by @openapi-codegen
 *
 * @version 1.0
 */
import * as reactQuery from '@tanstack/react-query'
import { useApiContext, ApiContext } from './apiContext'
import type * as Fetcher from './apiFetcher'
import { apiFetch } from './apiFetcher'
import type * as Schemas from './apiSchemas'

export type UsersControllerMeError = Fetcher.ErrorWrapper<undefined>

export type UsersControllerMeVariables = ApiContext['fetcherOptions']

export const fetchUsersControllerMe = (
  variables: UsersControllerMeVariables,
  signal?: AbortSignal
) =>
  apiFetch<Schemas.MeDTO, UsersControllerMeError, undefined, {}, {}, {}>({
    url: '/api/v1/users/me',
    method: 'get',
    ...variables,
    signal,
  })

export const useUsersControllerMe = <TData = Schemas.MeDTO>(
  variables: UsersControllerMeVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.MeDTO, UsersControllerMeError, TData>,
    'queryKey' | 'queryFn' | 'initialData'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options)
  return reactQuery.useQuery<Schemas.MeDTO, UsersControllerMeError, TData>({
    queryKey: queryKeyFn({
      path: '/api/v1/users/me',
      operationId: 'usersControllerMe',
      variables,
    }),
    queryFn: ({ signal }) =>
      fetchUsersControllerMe({ ...fetcherOptions, ...variables }, signal),
    ...options,
    ...queryOptions,
  })
}

export type SessionControllerLoginError = Fetcher.ErrorWrapper<undefined>

export type SessionControllerLoginVariables = {
  body: Schemas.UsernameLoginRequestDTO
} & ApiContext['fetcherOptions']

export const fetchSessionControllerLogin = (
  variables: SessionControllerLoginVariables,
  signal?: AbortSignal
) =>
  apiFetch<
    Schemas.UsernameLoginResponseDTO,
    SessionControllerLoginError,
    Schemas.UsernameLoginRequestDTO,
    {},
    {},
    {}
  >({ url: '/api/v1/session/username', method: 'post', ...variables, signal })

export const useSessionControllerLogin = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.UsernameLoginResponseDTO,
      SessionControllerLoginError,
      SessionControllerLoginVariables
    >,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = useApiContext()
  return reactQuery.useMutation<
    Schemas.UsernameLoginResponseDTO,
    SessionControllerLoginError,
    SessionControllerLoginVariables
  >({
    mutationFn: (variables: SessionControllerLoginVariables) =>
      fetchSessionControllerLogin({ ...fetcherOptions, ...variables }),
    ...options,
  })
}

export type SessionControllerRefreshTokenError = Fetcher.ErrorWrapper<undefined>

export type SessionControllerRefreshTokenVariables =
  ApiContext['fetcherOptions']

export const fetchSessionControllerRefreshToken = (
  variables: SessionControllerRefreshTokenVariables,
  signal?: AbortSignal
) =>
  apiFetch<
    Schemas.RefreshTokenResponseDTO,
    SessionControllerRefreshTokenError,
    undefined,
    {},
    {},
    {}
  >({ url: '/api/v1/session/refresh', method: 'post', ...variables, signal })

export const useSessionControllerRefreshToken = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.RefreshTokenResponseDTO,
      SessionControllerRefreshTokenError,
      SessionControllerRefreshTokenVariables
    >,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = useApiContext()
  return reactQuery.useMutation<
    Schemas.RefreshTokenResponseDTO,
    SessionControllerRefreshTokenError,
    SessionControllerRefreshTokenVariables
  >({
    mutationFn: (variables: SessionControllerRefreshTokenVariables) =>
      fetchSessionControllerRefreshToken({ ...fetcherOptions, ...variables }),
    ...options,
  })
}

export type HomeControllerAppInfoError = Fetcher.ErrorWrapper<undefined>

export type HomeControllerAppInfoVariables = ApiContext['fetcherOptions']

export const fetchHomeControllerAppInfo = (
  variables: HomeControllerAppInfoVariables,
  signal?: AbortSignal
) =>
  apiFetch<undefined, HomeControllerAppInfoError, undefined, {}, {}, {}>({
    url: '/',
    method: 'get',
    ...variables,
    signal,
  })

export const useHomeControllerAppInfo = <TData = undefined>(
  variables: HomeControllerAppInfoVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<undefined, HomeControllerAppInfoError, TData>,
    'queryKey' | 'queryFn' | 'initialData'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options)
  return reactQuery.useQuery<undefined, HomeControllerAppInfoError, TData>({
    queryKey: queryKeyFn({
      path: '/',
      operationId: 'homeControllerAppInfo',
      variables,
    }),
    queryFn: ({ signal }) =>
      fetchHomeControllerAppInfo({ ...fetcherOptions, ...variables }, signal),
    ...options,
    ...queryOptions,
  })
}

export type QueryOperation =
  | {
      path: '/api/v1/users/me'
      operationId: 'usersControllerMe'
      variables: UsersControllerMeVariables
    }
  | {
      path: '/'
      operationId: 'homeControllerAppInfo'
      variables: HomeControllerAppInfoVariables
    }
